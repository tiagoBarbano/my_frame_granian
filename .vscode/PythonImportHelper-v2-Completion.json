[
    {
        "label": "orjson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "orjson",
        "description": "orjson",
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "AppException",
        "importPath": "app.core.exception",
        "description": "app.core.exception",
        "isExtraImport": true,
        "detail": "app.core.exception",
        "documentation": {}
    },
    {
        "label": "AppException",
        "importPath": "app.core.exception",
        "description": "app.core.exception",
        "isExtraImport": true,
        "detail": "app.core.exception",
        "documentation": {}
    },
    {
        "label": "routes",
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "isExtraImport": true,
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "openapi_spec",
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "isExtraImport": true,
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "isExtraImport": true,
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "isExtraImport": true,
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "trace",
        "importPath": "opentelemetry",
        "description": "opentelemetry",
        "isExtraImport": true,
        "detail": "opentelemetry",
        "documentation": {}
    },
    {
        "label": "trace",
        "importPath": "opentelemetry",
        "description": "opentelemetry",
        "isExtraImport": true,
        "detail": "opentelemetry",
        "documentation": {}
    },
    {
        "label": "Status",
        "importPath": "opentelemetry.trace",
        "description": "opentelemetry.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.trace",
        "documentation": {}
    },
    {
        "label": "StatusCode",
        "importPath": "opentelemetry.trace",
        "description": "opentelemetry.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.trace",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "isExtraImport": true,
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "LoggerMiddleware",
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "isExtraImport": true,
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Histogram",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "CollectorRegistry",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "generate_latest",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "multiprocess",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "TracerProvider",
        "importPath": "opentelemetry.sdk.trace",
        "description": "opentelemetry.sdk.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace",
        "documentation": {}
    },
    {
        "label": "sampling",
        "importPath": "opentelemetry.sdk.trace",
        "description": "opentelemetry.sdk.trace",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "opentelemetry.sdk.resources",
        "description": "opentelemetry.sdk.resources",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.resources",
        "documentation": {}
    },
    {
        "label": "BatchSpanProcessor",
        "importPath": "opentelemetry.sdk.trace.export",
        "description": "opentelemetry.sdk.trace.export",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace.export",
        "documentation": {}
    },
    {
        "label": "ConsoleSpanExporter",
        "importPath": "opentelemetry.sdk.trace.export",
        "description": "opentelemetry.sdk.trace.export",
        "isExtraImport": true,
        "detail": "opentelemetry.sdk.trace.export",
        "documentation": {}
    },
    {
        "label": "LoggingInstrumentor",
        "importPath": "opentelemetry.instrumentation.logging",
        "description": "opentelemetry.instrumentation.logging",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.logging",
        "documentation": {}
    },
    {
        "label": "OTLPSpanExporter",
        "importPath": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "description": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "isExtraImport": true,
        "detail": "opentelemetry.exporter.otlp.proto.grpc.trace_exporter",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "json_response",
        "importPath": "app.core.application",
        "description": "app.core.application",
        "isExtraImport": true,
        "detail": "app.core.application",
        "documentation": {}
    },
    {
        "label": "read_body",
        "importPath": "app.core.application",
        "description": "app.core.application",
        "isExtraImport": true,
        "detail": "app.core.application",
        "documentation": {}
    },
    {
        "label": "send_response",
        "importPath": "app.core.application",
        "description": "app.core.application",
        "isExtraImport": true,
        "detail": "app.core.application",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.core.application",
        "description": "app.core.application",
        "isExtraImport": true,
        "detail": "app.core.application",
        "documentation": {}
    },
    {
        "label": "decode",
        "importPath": "app.user_model",
        "description": "app.user_model",
        "isExtraImport": true,
        "detail": "app.user_model",
        "documentation": {}
    },
    {
        "label": "msgspec",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msgspec",
        "description": "msgspec",
        "detail": "msgspec",
        "documentation": {}
    },
    {
        "label": "HttpUser",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "task",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "between",
        "importPath": "locust",
        "description": "locust",
        "isExtraImport": true,
        "detail": "locust",
        "documentation": {}
    },
    {
        "label": "app.core.tracing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "app.core.tracing",
        "description": "app.core.tracing",
        "detail": "app.core.tracing",
        "documentation": {}
    },
    {
        "label": "PrometheusMiddleware",
        "importPath": "app.core.metrics",
        "description": "app.core.metrics",
        "isExtraImport": true,
        "detail": "app.core.metrics",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.router",
        "description": "app.router",
        "isExtraImport": true,
        "detail": "app.router",
        "documentation": {}
    },
    {
        "label": "OpenTelemetryMiddleware",
        "importPath": "opentelemetry.instrumentation.asgi",
        "description": "opentelemetry.instrumentation.asgi",
        "isExtraImport": true,
        "detail": "opentelemetry.instrumentation.asgi",
        "documentation": {}
    },
    {
        "label": "parse_excluded_urls",
        "importPath": "opentelemetry.util.http",
        "description": "opentelemetry.util.http",
        "isExtraImport": true,
        "detail": "opentelemetry.util.http",
        "documentation": {}
    },
    {
        "label": "json_response",
        "kind": 2,
        "importPath": "app.core.application",
        "description": "app.core.application",
        "peekOfCode": "def json_response(data, status=200):\n    return status, [(b\"content-type\", b\"application/json\")], [orjson.dumps(data)]\ndef text_plain_response(data, status=200):\n    return status, [(b\"content-type\", b\"text/plain\")], [data]\ndef text_html_response(data, status=200):\n    return status, [(b\"content-type\", b\"text/html\")], [data]\nasync def read_body(receive):\n    body = b\"\"\n    while True:\n        message = await receive()",
        "detail": "app.core.application",
        "documentation": {}
    },
    {
        "label": "text_plain_response",
        "kind": 2,
        "importPath": "app.core.application",
        "description": "app.core.application",
        "peekOfCode": "def text_plain_response(data, status=200):\n    return status, [(b\"content-type\", b\"text/plain\")], [data]\ndef text_html_response(data, status=200):\n    return status, [(b\"content-type\", b\"text/html\")], [data]\nasync def read_body(receive):\n    body = b\"\"\n    while True:\n        message = await receive()\n        if message[\"type\"] == \"http.request\":\n            body += message.get(\"body\", b\"\")",
        "detail": "app.core.application",
        "documentation": {}
    },
    {
        "label": "text_html_response",
        "kind": 2,
        "importPath": "app.core.application",
        "description": "app.core.application",
        "peekOfCode": "def text_html_response(data, status=200):\n    return status, [(b\"content-type\", b\"text/html\")], [data]\nasync def read_body(receive):\n    body = b\"\"\n    while True:\n        message = await receive()\n        if message[\"type\"] == \"http.request\":\n            body += message.get(\"body\", b\"\")\n            if not message.get(\"more_body\", False):\n                break",
        "detail": "app.core.application",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.core.application",
        "description": "app.core.application",
        "peekOfCode": "settings = get_settings()\nasync def app(scope, receive, send):\n    try:\n        method = scope[\"method\"]\n        path = scope[\"path\"]\n        handler = routes.get((path, method))\n        if handler:\n            return await handler(scope, receive, send)\n        if settings.enable_swagger:\n            if path == \"/openapi.json\":",
        "detail": "app.core.application",
        "documentation": {}
    },
    {
        "label": "AppException",
        "kind": 6,
        "importPath": "app.core.exception",
        "description": "app.core.exception",
        "peekOfCode": "class AppException(Exception):\n    def __init__(self, message: str, status_code: int = 400):\n        self.message = message\n        self.status_code = status_code\n        with tracer.start_span(f\"error.{status_code}\", attributes={\"force_sample\": True}) as span:\n            span.set_status(Status(StatusCode.ERROR, message))\n            span.record_exception(self)\n        log.error(self.message, extra={\"status_code\":status_code})\n        super().__init__(message)",
        "detail": "app.core.exception",
        "documentation": {}
    },
    {
        "label": "tracer",
        "kind": 5,
        "importPath": "app.core.exception",
        "description": "app.core.exception",
        "peekOfCode": "tracer = trace.get_tracer(\"error.tracer\")\nclass AppException(Exception):\n    def __init__(self, message: str, status_code: int = 400):\n        self.message = message\n        self.status_code = status_code\n        with tracer.start_span(f\"error.{status_code}\", attributes={\"force_sample\": True}) as span:\n            span.set_status(Status(StatusCode.ERROR, message))\n            span.record_exception(self)\n        log.error(self.message, extra={\"status_code\":status_code})\n        super().__init__(message)",
        "detail": "app.core.exception",
        "documentation": {}
    },
    {
        "label": "OrjsonFormatter",
        "kind": 6,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "class OrjsonFormatter(logging.Formatter):\n    __slots__ = ()\n    def format(self, record):\n        log_record = {\n            \"time\": time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(record.created)),\n            \"level\": record.levelname,\n            \"message\": record.getMessage(),\n            \"logger\": record.name,\n        }\n        if record.exc_info:",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "LoggerMiddleware",
        "kind": 6,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "class LoggerMiddleware:\n    def __init__(self, app):\n        self.app = app\n    async def __call__(self, scope, receive, send):\n        start_time = time.perf_counter()\n        if scope[\"type\"] == \"http\":\n            log.info(\"start_process\", extra={\"method\": scope[\"method\"], \"path\": scope[\"path\"]})\n        status_code = 200\n        body_parts = []\n        async def send_wrapper(message):",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "settings = get_settings()\n_LOG_QUEUE = queue.Queue()\n_SHUTDOWN = object()\nclass OrjsonFormatter(logging.Formatter):\n    __slots__ = ()\n    def format(self, record):\n        log_record = {\n            \"time\": time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(record.created)),\n            \"level\": record.levelname,\n            \"message\": record.getMessage(),",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "_LOG_QUEUE",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "_LOG_QUEUE = queue.Queue()\n_SHUTDOWN = object()\nclass OrjsonFormatter(logging.Formatter):\n    __slots__ = ()\n    def format(self, record):\n        log_record = {\n            \"time\": time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(record.created)),\n            \"level\": record.levelname,\n            \"message\": record.getMessage(),\n            \"logger\": record.name,",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "_SHUTDOWN",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "_SHUTDOWN = object()\nclass OrjsonFormatter(logging.Formatter):\n    __slots__ = ()\n    def format(self, record):\n        log_record = {\n            \"time\": time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(record.created)),\n            \"level\": record.levelname,\n            \"message\": record.getMessage(),\n            \"logger\": record.name,\n        }",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "log = _setup_logging()\n_writer_thread = threading.Thread(target=_log_writer, daemon=True).start()\natexit.register(_shutdown_logging)\nclass LoggerMiddleware:\n    def __init__(self, app):\n        self.app = app\n    async def __call__(self, scope, receive, send):\n        start_time = time.perf_counter()\n        if scope[\"type\"] == \"http\":\n            log.info(\"start_process\", extra={\"method\": scope[\"method\"], \"path\": scope[\"path\"]})",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "_writer_thread",
        "kind": 5,
        "importPath": "app.core.logger",
        "description": "app.core.logger",
        "peekOfCode": "_writer_thread = threading.Thread(target=_log_writer, daemon=True).start()\natexit.register(_shutdown_logging)\nclass LoggerMiddleware:\n    def __init__(self, app):\n        self.app = app\n    async def __call__(self, scope, receive, send):\n        start_time = time.perf_counter()\n        if scope[\"type\"] == \"http\":\n            log.info(\"start_process\", extra={\"method\": scope[\"method\"], \"path\": scope[\"path\"]})\n        status_code = 200",
        "detail": "app.core.logger",
        "documentation": {}
    },
    {
        "label": "PrometheusMiddleware",
        "kind": 6,
        "importPath": "app.core.metrics",
        "description": "app.core.metrics",
        "peekOfCode": "class PrometheusMiddleware:\n    def __init__(self, app):\n        self.app = app\n    async def __call__(self, scope, receive, send):\n        start_time = time.monotonic_ns()\n        if scope[\"type\"] != \"http\" or scope[\"path\"] == \"/metrics\":\n            return await self.app(scope, receive, send)\n        method = scope[\"method\"]\n        path = scope[\"path\"]\n        status_code = 500",
        "detail": "app.core.metrics",
        "documentation": {}
    },
    {
        "label": "prometheus_metrics",
        "kind": 2,
        "importPath": "app.core.metrics",
        "description": "app.core.metrics",
        "peekOfCode": "def prometheus_metrics():\n    if settings.prometheus_multiproc_dir:\n        registry = CollectorRegistry()\n        multiprocess.MultiProcessCollector(registry)\n        return generate_latest(registry)\n    else:\n        return generate_latest()\nREQUEST_LATENCY = Histogram(\n    \"http_request_duration_seconds\", \"Request latency\", [\"method\", \"path\", \"status\"]\n)",
        "detail": "app.core.metrics",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.core.metrics",
        "description": "app.core.metrics",
        "peekOfCode": "settings = get_settings()\ndef prometheus_metrics():\n    if settings.prometheus_multiproc_dir:\n        registry = CollectorRegistry()\n        multiprocess.MultiProcessCollector(registry)\n        return generate_latest(registry)\n    else:\n        return generate_latest()\nREQUEST_LATENCY = Histogram(\n    \"http_request_duration_seconds\", \"Request latency\", [\"method\", \"path\", \"status\"]",
        "detail": "app.core.metrics",
        "documentation": {}
    },
    {
        "label": "REQUEST_LATENCY",
        "kind": 5,
        "importPath": "app.core.metrics",
        "description": "app.core.metrics",
        "peekOfCode": "REQUEST_LATENCY = Histogram(\n    \"http_request_duration_seconds\", \"Request latency\", [\"method\", \"path\", \"status\"]\n)\nclass PrometheusMiddleware:\n    def __init__(self, app):\n        self.app = app\n    async def __call__(self, scope, receive, send):\n        start_time = time.monotonic_ns()\n        if scope[\"type\"] != \"http\" or scope[\"path\"] == \"/metrics\":\n            return await self.app(scope, receive, send)",
        "detail": "app.core.metrics",
        "documentation": {}
    },
    {
        "label": "route",
        "kind": 2,
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "peekOfCode": "def route(method: str, path: str, summary: str = \"\"):\n    def decorator(func):\n        if settings.enable_swagger:\n            openapi_spec[\"paths\"].setdefault(path, {})[method] = {\n                \"summary\": summary,\n                \"responses\": {\"200\": {\"description\": \"Sucesso\"}},\n            }\n        routes[(path, method.upper())] = func\n        return func\n    return decorator",
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "peekOfCode": "settings = Settings()\nroutes = {}\nopenapi_spec = {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\"title\": settings.app_name, \"version\": \"1.0.0\"},\n    \"paths\": {},\n}\ndef route(method: str, path: str, summary: str = \"\"):\n    def decorator(func):\n        if settings.enable_swagger:",
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "routes",
        "kind": 5,
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "peekOfCode": "routes = {}\nopenapi_spec = {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\"title\": settings.app_name, \"version\": \"1.0.0\"},\n    \"paths\": {},\n}\ndef route(method: str, path: str, summary: str = \"\"):\n    def decorator(func):\n        if settings.enable_swagger:\n            openapi_spec[\"paths\"].setdefault(path, {})[method] = {",
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "openapi_spec",
        "kind": 5,
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "peekOfCode": "openapi_spec = {\n    \"openapi\": \"3.0.0\",\n    \"info\": {\"title\": settings.app_name, \"version\": \"1.0.0\"},\n    \"paths\": {},\n}\ndef route(method: str, path: str, summary: str = \"\"):\n    def decorator(func):\n        if settings.enable_swagger:\n            openapi_spec[\"paths\"].setdefault(path, {})[method] = {\n                \"summary\": summary,",
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 5,
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "peekOfCode": "get = lambda path, summary: route(\"get\", path, summary)  # noqa: E731\npost = lambda path, summary: route(\"post\", path, summary)  # noqa: E731",
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "post",
        "kind": 5,
        "importPath": "app.core.routing",
        "description": "app.core.routing",
        "peekOfCode": "post = lambda path, summary: route(\"post\", path, summary)  # noqa: E731",
        "detail": "app.core.routing",
        "documentation": {}
    },
    {
        "label": "ErrorAwareSampler",
        "kind": 6,
        "importPath": "app.core.tracing",
        "description": "app.core.tracing",
        "peekOfCode": "class ErrorAwareSampler(sampling.Sampler):\n    def __init__(self, ratio=0.1):\n        self.normal_sampler = sampling.TraceIdRatioBased(ratio)\n    def should_sample(self, parent_context, trace_id, name, kind, attributes, links):\n        if attributes and attributes.get(\"force_sample\") is True:\n            return sampling.SamplingResult(sampling.Decision.RECORD_AND_SAMPLE)\n        return self.normal_sampler.should_sample(\n            parent_context, trace_id, name, kind, attributes, links\n        )\n    def get_description(self):",
        "detail": "app.core.tracing",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.core.tracing",
        "description": "app.core.tracing",
        "peekOfCode": "settings = get_settings()\nclass ErrorAwareSampler(sampling.Sampler):\n    def __init__(self, ratio=0.1):\n        self.normal_sampler = sampling.TraceIdRatioBased(ratio)\n    def should_sample(self, parent_context, trace_id, name, kind, attributes, links):\n        if attributes and attributes.get(\"force_sample\") is True:\n            return sampling.SamplingResult(sampling.Decision.RECORD_AND_SAMPLE)\n        return self.normal_sampler.should_sample(\n            parent_context, trace_id, name, kind, attributes, links\n        )",
        "detail": "app.core.tracing",
        "documentation": {}
    },
    {
        "label": "exporter",
        "kind": 5,
        "importPath": "app.core.tracing",
        "description": "app.core.tracing",
        "peekOfCode": "exporter = (\n    ConsoleSpanExporter()\n    if settings.flag_local\n    else OTLPSpanExporter(endpoint=settings.endpoint_otel, insecure=True)\n)\nresource = Resource.create(attributes={\"service.name\": settings.app_name})\ntracer = TracerProvider(resource=resource, sampler=ErrorAwareSampler(ratio=0.05))\ntracer.add_span_processor(BatchSpanProcessor(exporter))\ntrace.set_tracer_provider(tracer)\nLoggingInstrumentor().instrument(tracer_provider=tracer)",
        "detail": "app.core.tracing",
        "documentation": {}
    },
    {
        "label": "resource",
        "kind": 5,
        "importPath": "app.core.tracing",
        "description": "app.core.tracing",
        "peekOfCode": "resource = Resource.create(attributes={\"service.name\": settings.app_name})\ntracer = TracerProvider(resource=resource, sampler=ErrorAwareSampler(ratio=0.05))\ntracer.add_span_processor(BatchSpanProcessor(exporter))\ntrace.set_tracer_provider(tracer)\nLoggingInstrumentor().instrument(tracer_provider=tracer)",
        "detail": "app.core.tracing",
        "documentation": {}
    },
    {
        "label": "tracer",
        "kind": 5,
        "importPath": "app.core.tracing",
        "description": "app.core.tracing",
        "peekOfCode": "tracer = TracerProvider(resource=resource, sampler=ErrorAwareSampler(ratio=0.05))\ntracer.add_span_processor(BatchSpanProcessor(exporter))\ntrace.set_tracer_provider(tracer)\nLoggingInstrumentor().instrument(tracer_provider=tracer)",
        "detail": "app.core.tracing",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    prometheus_multiproc_dir: str | None = Field(default=None, validate_default=False)\n    app_name: str\n    logger_level: str = Field(default=\"WARNING\", validate_default=False)\n    endpoint_otel: str = Field(default=\"http://localhost:4317\", validate_default=False)\n    flag_local: bool = Field(default=True, validate_default=False)\n    enable_tracing: bool = Field(default=True, validate_default=False)\n    enable_metrics: bool = Field(default=True, validate_default=False)\n    enable_logger: bool = Field(default=False, validate_default=False)\n    enable_swagger: bool = Field(default=True, validate_default=False)",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "kind": 2,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "def get_settings():\n    return Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.user_model",
        "description": "app.user_model",
        "peekOfCode": "class User(msgspec.Struct):\n    empresa: str\n    valor: int\ndecode = msgspec.json.Decoder(type=User).decode\nencode = msgspec.json.Encoder().encode",
        "detail": "app.user_model",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 5,
        "importPath": "app.user_model",
        "description": "app.user_model",
        "peekOfCode": "decode = msgspec.json.Decoder(type=User).decode\nencode = msgspec.json.Encoder().encode",
        "detail": "app.user_model",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "app.user_model",
        "description": "app.user_model",
        "peekOfCode": "encode = msgspec.json.Encoder().encode",
        "detail": "app.user_model",
        "documentation": {}
    },
    {
        "label": "BenchmarkUser",
        "kind": 6,
        "importPath": "tests.locustfile",
        "description": "tests.locustfile",
        "peekOfCode": "class BenchmarkUser(HttpUser):\n    # wait_time = between(1, 2)\n    @task\n    def cotacao(self):\n        self.client.post(\"/cotacao\", json={\"empresa\": \"ABC\", \"valor\": 100})",
        "detail": "tests.locustfile",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "settings = Settings()\n# Define a função principal do aplicativo\napp = app\n# Configuração dos Middlewares\n# Habilita o Middleware de logger\nif settings.enable_logger:\n    app = LoggerMiddleware(app)\n# Habilita as Metricas do Prometheus\nif settings.enable_metrics:\n    app = PrometheusMiddleware(app)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = app\n# Configuração dos Middlewares\n# Habilita o Middleware de logger\nif settings.enable_logger:\n    app = LoggerMiddleware(app)\n# Habilita as Metricas do Prometheus\nif settings.enable_metrics:\n    app = PrometheusMiddleware(app)\n# Habilita o Tracing do OpenTelemetry\nif settings.enable_tracing:",
        "detail": "main",
        "documentation": {}
    }
]